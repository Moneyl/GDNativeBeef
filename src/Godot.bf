using System.Interop;
using System;

static
{
	public static GDNative.GDNativeBool GDTrue = 255;
	public static GDNative.GDNativeBool GDFalse = 0;
}

//This file is a port of the C gdnative interface. See here: https://github.com/godotengine/godot-headers/blob/e00386d464f87e39d8cc15fecde34802bb0f0200/godot/gdnative_interface.h
//Code for accessing the rest of the engine (nodes, servers, etc) is generated by BindingGenerator.py and saved to other .bf files
//See the GDNativeBeefTest project for use examples
namespace GDNative
{
	typealias GDNativeVariantPtr = void*;
	typealias GDNativeStringNamePtr = void*;
	typealias GDNativeStringPtr = void*;
	typealias GDNativeObjectPtr = void*;
	typealias GDNativeTypePtr = void*;
	typealias GDNativeExtensionPtr = void*;
	typealias GDNativeMethodBindPtr = void*;
	typealias GDNativeInt = int64;
	typealias GDNativeBool = uint8;
	typealias GDObjectInstanceID = uint64;
	typealias size_t = c_ulonglong;

	typealias GDNativeVariantFromTypeConstructorFunc = function void(GDNativeVariantPtr, GDNativeTypePtr);
	typealias GDNativeTypeFromVariantConstructorFunc = function void(GDNativeTypePtr, GDNativeVariantPtr);
	typealias GDNativePtrOperatorEvaluator = function void(GDNativeTypePtr left, GDNativeTypePtr right, GDNativeTypePtr result);
	typealias GDNativePtrBuiltInMethod = function void(GDNativeTypePtr basePtr, GDNativeTypePtr* args, GDNativeTypePtr returnPtr, c_int argumentCount);
	typealias GDNativePtrConstructor = function void(GDNativeTypePtr basePtr, GDNativeTypePtr* args);
	typealias GDNativePtrDestructor = function void(GDNativeTypePtr basePtr);
	typealias GDNativePtrSetter = function void(GDNativeTypePtr basePtr, GDNativeTypePtr value);
	typealias GDNativePtrGetter = function void(GDNativeTypePtr basePtr, GDNativeTypePtr value);
	typealias GDNativePtrIndexedSetter = function void(GDNativeTypePtr basePtr, GDNativeInt index, GDNativeTypePtr value);
	typealias GDNativePtrIndexedGetter = function void(GDNativeTypePtr basePtr, GDNativeInt index, GDNativeTypePtr value);
	typealias GDNativePtrKeyedSetter = function void(GDNativeTypePtr basePtr, GDNativeTypePtr key, GDNativeTypePtr value);
	typealias GDNativePtrKeyedGetter = function void(GDNativeTypePtr basePtr, GDNativeTypePtr key, GDNativeTypePtr value);
	typealias GDNativePtrKeyedChecker = function uint32(GDNativeVariantPtr basePtr, GDNativeVariantPtr key);
	typealias GDNativePtrUtilityFunction = function void(GDNativeTypePtr returnPtr, GDNativeTypePtr* arguments, int argumentCount);
	typealias GDNativeClassConstructor = function GDNativeObjectPtr();

	[CRepr]
	public enum VariantType
	{
		//Atomic types
		Nil,
		Bool,
		Int,
		Float,
		String,

		//Math types
		Vector2,
		Vector2i,
		Rect2,
		Rect2i,
		Vector3,
		Vector3i,
		Transform2d,
		Plane,
		Quaternion,
		AABB,
		Basis,
		Transform3d,

		//Misc types
		Color,
		StringName,
		NodePath,
		RID,
		Object,
		Callable,
		Signal,
		Dictionary,
		Array,

		//Typed arrays
		PackedByteArray,
		PackedInt32Array,
		PackedInt64Array,
		PackedFloat32Array,
		PackedFloat64Array,
		PackedString,
		PackedVector2Array,
		PackedVector3Array,
		PackedColorArray,

		Max
	}

	[CRepr]
	public enum VariantOperator
	{
		//Comparison
		Equal,
		NotEqual,
		Less,
		LessEqual,
		Greater,
		GreaterEqual,

		//Mathematic
		Add,
		Subtract,
		Multiply,
		Divide,
		Negate,
		Positive,
		Module,

		//Bitwise
		ShiftLeft,
		ShiftRight,
		BitAnd,
		BitOr,
		BitXor,
		BitNegate,

		//Logic
		And,
		Or,
		Xor,
		Not,

		//Containment
		In,
		Max
	}

	[CRepr]
	public enum CallErrorType
	{
		Ok,
		ErrorInvalidMethod,
		ErrorInvalidArgument,
		ErrorTooManyArguments,
		ErrorTooFewArguments,
		ErrorInstanceIsNull
	}

	[CRepr]
	public struct CallError
	{
		public CallErrorType Error;
		public int32 Argument;
		public int32 Expected;
	}

	typealias InstanceBindingCreateCallback = function void*(void* token, void* instance);
	typealias InstanceBindingFreeCallback = function void(void* token, void* instance, void* binding);
	typealias InstanceBindingReferenceCallback = function GDNativeBool(void* token, void* binding, GDNativeBool reference);

	[CRepr]
	public struct InstanceBindingCallbacks
	{
		public InstanceBindingCreateCallback CreateCallback;
		public InstanceBindingFreeCallback FreeCallback;
		public InstanceBindingReferenceCallback ReferenceCallback;
	}

	[CRepr]
	public struct GDNativePropertyInfo
	{
		public uint32 type;
		public c_char* name;
		public c_char* class_name;
		public uint32 hint;
		public c_char* hint_string;
		public uint32 usage;
	}

	typealias ExtensionClassInstancePtr = void*;
	typealias ExtensionClassLibraryPtr = void*;
	typealias ExtensionClassSet = function GDNativeBool(ExtensionClassInstancePtr instance, GDNativeStringNamePtr name, GDNativeVariantPtr value);
	typealias ExtensionClassGet = function GDNativeBool(ExtensionClassInstancePtr instance, GDNativeStringNamePtr name, GDNativeVariantPtr ret);
	typealias ExtensionClassGetPropertyList = function GDNativePropertyInfo*(ExtensionClassInstancePtr instance, uint32* count);
	typealias ExtensionClassFreePropertyList = function void(ExtensionClassInstancePtr instance, GDNativePropertyInfo *list);
	typealias ExtensionClassNotification = function void(ExtensionClassInstancePtr instance, int32 what);
	typealias ExtensionClassToString = function c_char*(ExtensionClassInstancePtr instance);
	typealias ExtensionClassReference = function void(ExtensionClassInstancePtr instance);
	typealias ExtensionClassUnreference  = function void(ExtensionClassInstancePtr instance);
	typealias ExtensionClassCallVirtual = function void(ExtensionClassInstancePtr instance, GDNativeTypePtr* args, GDNativeTypePtr ret);
	typealias ExtensionClassCreateInstance = function GDNativeObjectPtr(void* userdata);
	typealias ExtensionClassFreeInstance = function void(void* userdata, ExtensionClassInstancePtr instance);
	typealias ExtensionClassObjectInstance = function void(ExtensionClassInstancePtr instance, GDNativeObjectPtr objectInstance);
	typealias ExtensionClassGetVirtual = function ExtensionClassCallVirtual(void* userdata, c_char *name);
	typealias ExtensionClassMethodCall = function void(void* userdata, ExtensionClassInstancePtr instance, GDNativeVariantPtr* args, GDNativeInt argumentCount, GDNativeVariantPtr ret, CallError* error);
	typealias ExtensionClassMethodPtrCall = function void(void* userdata, ExtensionClassInstancePtr instance, GDNativeVariantPtr* args, GDNativeVariantPtr ret);

	/* passing -1 as argument in the following functions refers to the return type */
	typealias ExtensionClassMethodGetArgumentType = function VariantType(void *userdata, int32 argument);
	typealias ExtensionClassMethodGetArgumentInfo = function void(void *p_method_userdata, int32 argument, GDNativePropertyInfo *info);
	typealias ExtensionClassMethodGetArgumentMetadata = function ExtensionClassMethodArgumentMetadata(void *userdata, int32 argument);

	[CRepr]
	public struct GDNativeExtensionClassCreationInfo
	{
		public ExtensionClassSet SetFunc;
		public ExtensionClassGet GetFunc;
		public ExtensionClassGetPropertyList GetPropertyListFunc;
		public ExtensionClassFreePropertyList FreePropertyListFunc;
		public ExtensionClassNotification NotificationFunc;
		public ExtensionClassToString ToStringFunc;
		public ExtensionClassReference ReferenceFunc;
		public ExtensionClassUnreference UnreferenceFunc;
		public ExtensionClassCreateInstance CreateInstanceFunc; /* this one is mandatory */
		public ExtensionClassFreeInstance FreeInstanceFunc; /* this one is mandatory */
		public ExtensionClassGetVirtual GetVirtualFunc;
		public void* ClassUserdata;
	}

	[CRepr]
	public enum ExtensionClassMethodFlags
	{
		Normal = 1,
		Editor = 2,
		NoScript = 4,
		Const = 8,
		Reverse = 16, /* used for events */
		Virtual = 32,
		FromScript = 64,
		VarArg = 128,
		Static = 256,
		Default = Normal,
	}

	[CRepr]
	public enum ExtensionClassMethodArgumentMetadata
	{
		None,
		IntIsInt8,
		IntIsInt16,
		IntIsInt32,
		IntIsInt64,
		IntIsUint8,
		IntIsUint16,
		IntIsUint32,
		IntIsUint64,
		RealIsFloat,
		RealIsDouble
	}

	[CRepr]
	public struct ExtensionClassMethodInfo
	{
		public c_char* Name;
		public void* Userdata;
		public ExtensionClassMethodCall CallFunc;
		public ExtensionClassMethodPtrCall PtrcallFunc;
		public uint32 MethodFlags; /* GDNativeExtensionClassMethodFlags */
		public uint32 ArgumentCount;
		public GDNativeBool HasReturnValue;
		public ExtensionClassMethodGetArgumentType GetArgumentTypeFunc;
		public ExtensionClassMethodGetArgumentInfo GetArgumentInfoFunc; /* name and hint information for the argument can be omitted in release builds. Class name should always be present if it applies. */
		public ExtensionClassMethodGetArgumentMetadata GetArgumentMetadataFunc;
		public uint32 DefaultArgumentCount;
		public GDNativeVariantPtr* DefaultArguments;
	}

	[CRepr]
	public enum InitializationLevel
	{
		Core,
		Servers,
		Scene,
		Driver,
		Editor,
		Max
	}

	[CRepr]
	public struct Initialization
	{
		public InitializationLevel MinimumInitializationLevel;
		public void* Userdata;
		public function void(void* userdata, InitializationLevel level) Initialize;
		public function void(void* userdata, InitializationLevel level) Deinitialize;
	}

	//GDNative C interface
	[CRepr]
	public struct Interface
	{
		public uint32 VersionMajor;
		public uint32 VersionMinor;
		public uint32 VersionPatch;
		public c_char* VersionString;

		/*Godot core*/
		public function void*(size_t bytes) MemAlloc;
		public function void*(void* ptr, size_t bytes) MemRealloc;
		public function void(void* ptr) MemFree;
		public function void(c_char* description, c_char* func, c_char* file, int32 line) PrintError;
		public function void(c_char* description, c_char* func, c_char* file, int32 line) PrintWarning;
		public function void(c_char* description, c_char* func, c_char* file, int32 line) PrintScriptError;

		/*Godot variant*/
		//General
		public function void(GDNativeVariantPtr dest, GDNativeVariantPtr src) VariantNewCopy;
		public function void(GDNativeVariantPtr dest) VariantNewNil;
		public function void(GDNativeVariantPtr self) VariantDestroy;

		//Typed
		public function void (GDNativeVariantPtr self, GDNativeStringNamePtr method, GDNativeVariantPtr* args, GDNativeInt argument_count, GDNativeVariantPtr ret, CallError* error) VariantCall;
		public function void (VariantType type, GDNativeStringNamePtr method, GDNativeVariantPtr* args, GDNativeInt argument_count, GDNativeVariantPtr ret, CallError* error) VariantCallStatic;
		public function void (VariantOperator op, GDNativeVariantPtr a, GDNativeVariantPtr b, GDNativeVariantPtr ret, GDNativeBool* valid) VariantEvaluate;
		public function void (GDNativeVariantPtr self, GDNativeVariantPtr key, GDNativeVariantPtr value, GDNativeBool* valid) VariantSet;
		public function void (GDNativeVariantPtr self, GDNativeStringNamePtr key, GDNativeVariantPtr value, GDNativeBool* valid) VariantSetNamed;
		public function void (GDNativeVariantPtr self, GDNativeVariantPtr key, GDNativeVariantPtr value, GDNativeBool* valid) VariantSetKeyed;
		public function void (GDNativeVariantPtr self, GDNativeInt index, GDNativeVariantPtr value, GDNativeBool* valid, GDNativeBool* oob) VariantSetIndexed;
		public function void (GDNativeVariantPtr self, GDNativeVariantPtr key, GDNativeVariantPtr ret, GDNativeBool* valid) VariantGet;
		public function void (GDNativeVariantPtr self, GDNativeStringNamePtr key, GDNativeVariantPtr ret, GDNativeBool* valid) VariantGetNamed;
		public function void (GDNativeVariantPtr self, GDNativeVariantPtr key, GDNativeVariantPtr ret, GDNativeBool* valid) VariantGetKeyed;
		public function void (GDNativeVariantPtr self, GDNativeInt index, GDNativeVariantPtr ret, GDNativeBool* valid, GDNativeBool* oob) VariantGetIndexed;
		public function GDNativeBool (GDNativeVariantPtr self, GDNativeVariantPtr iter, GDNativeBool* valid) VariantIterInit;
		public function GDNativeBool (GDNativeVariantPtr self, GDNativeVariantPtr iter, GDNativeBool* valid) VariantIterNext;
		public function void (GDNativeVariantPtr self, GDNativeVariantPtr iter, GDNativeVariantPtr ret, GDNativeBool* valid) VariantIterGet;
		public function GDNativeBool (GDNativeVariantPtr self, GDNativeVariantPtr other) VariantHashCompare;
		public function GDNativeBool (GDNativeVariantPtr self) VariantBooleanize;
		public function void (GDNativeVariantPtr a, GDNativeVariantPtr b, float c, GDNativeVariantPtr dst) VariantBlend;
		public function void (GDNativeVariantPtr a, GDNativeVariantPtr b, float c, GDNativeVariantPtr dst) VariantInterpolate;
		public function void (GDNativeVariantPtr self, GDNativeVariantPtr ret, GDNativeBool deep) VariantDuplicate;
		public function void (GDNativeVariantPtr self, GDNativeStringPtr ret) VariantStringify;
		public function VariantType (GDNativeVariantPtr self) VariantGetType;
		public function GDNativeBool (GDNativeVariantPtr self, GDNativeStringNamePtr method) VariantHasMethod;
		public function GDNativeBool (VariantType type, GDNativeStringNamePtr member) VariantHasMember;
		public function GDNativeBool (GDNativeVariantPtr self, GDNativeVariantPtr key, GDNativeBool* valid) VariantHasKey;
		public function void (VariantType type, GDNativeStringPtr name) VariantGetTypeName;
		public function GDNativeBool (VariantType from, VariantType to) VariantCanConvert;
		public function GDNativeBool (VariantType from, VariantType to) VariantCanConvertStrict;

		/*Ptr calls*/
		public function GDNativeVariantFromTypeConstructorFunc(VariantType type) GetVariantFromTypeConstructor;
		public function GDNativeTypeFromVariantConstructorFunc(VariantType type) GetVariantToTypeConstructor;
		public function GDNativePtrOperatorEvaluator(VariantOperator op, VariantType type_a, VariantType b) VariantGetPtrOperatorEvaluator;
		public function GDNativePtrBuiltInMethod(VariantType type, c_char* method, GDNativeInt hash) VariantGetPtrBuiltinMethod;
		public function GDNativePtrConstructor(VariantType type, int32 constructor) VariantGetPtrConstructor;
		public function GDNativePtrDestructor(VariantType type) VariantGetPtrDestructor;
		public function void(VariantType type, GDNativeVariantPtr basePtr, GDNativeVariantPtr* args, int32 argument_count, CallError* error) VariantConstruct;
		public function GDNativePtrSetter(VariantType type, c_char* member) VariantGetPtrSetter;
		public function GDNativePtrGetter(VariantType type, c_char* member) VariantGetPtrGetter;
		public function GDNativePtrIndexedSetter(VariantType type) VariantGetPtrIndexedSetter;
		public function GDNativePtrIndexedGetter(VariantType type) VariantGetPtrIndexedGetter;
		public function GDNativePtrKeyedSetter(VariantType type) VariantGetPtrKeyedSetter;
		public function GDNativePtrKeyedGetter(VariantType type) VariantGetPtrKeyedGetter;
		public function GDNativePtrKeyedChecker(VariantType type) VariantGetPtrKeyedChecker;
		public function void(VariantType type, c_char* constant, GDNativeVariantPtr r_ret) VariantGetConstantValue;
		public function GDNativePtrUtilityFunction(c_char* func, GDNativeInt hash) VariantGetPtrUtilityFunction;

		/*Extra utilities*/
		public function void(GDNativeStringPtr dest, c_char* contents) StringNewWithLatin1Chars;
		public function void(GDNativeStringPtr dest, c_char* contents) StringNewWithUtf8Chars;
		public function void(GDNativeStringPtr dest, char16* contents) StringNewWithUtf16Chars;
		public function void(GDNativeStringPtr dest, char32* contents) StringNewWithUtf32Chars;
		public function void(GDNativeStringPtr dest, c_wchar* contents) StringNewWithWideChars;
		public function void(GDNativeStringPtr dest, c_char* contents, GDNativeInt size) StringNewWithLatin1CharsAndLen;
		public function void(GDNativeStringPtr dest, c_char* contents, GDNativeInt size) StringNewWithUtf8CharsAndLen;
		public function void(GDNativeStringPtr dest, char16* contents, GDNativeInt size) StringNewWithUtf16CharsAndLen;
		public function void(GDNativeStringPtr dest, char32* contents, GDNativeInt size) StringNewWithUtf32CharsAndLen;
		public function void(GDNativeStringPtr dest, c_wchar* contents, GDNativeInt size) StringNewWithWideCharsAndLen;
		/* Information about the following functions:
		* - The return value is the resulting encoded string length.
		* - The length returned is in characters, not in bytes. It also does not include a trailing zero.
		* - These functions also do not write trailing zero, If you need it, write it yourself at the position indicated by the length (and make sure to allocate it).
		* - Passing NULL in r_text means only the length is computed (again, without including trailing zero).
		* - p_max_write_length argument is in characters, not bytes. It will be ignored if r_text is NULL.
		* - p_max_write_length argument does not affect the return value, it's only to cap write length.
		*/
		public function GDNativeInt(GDNativeStringPtr self, c_char* text, GDNativeInt max_write_length) StringToLatin1Chars;
		public function GDNativeInt(GDNativeStringPtr self, c_char* text, GDNativeInt max_write_length) StringToUtf8Chars;
		public function GDNativeInt(GDNativeStringPtr self, char16* text, GDNativeInt max_write_length) StringToUtf16Chars;
		public function GDNativeInt(GDNativeStringPtr self, char32* text, GDNativeInt max_write_length) StringToUtf32Chars;
		public function GDNativeInt(GDNativeStringPtr self, c_wchar* text, GDNativeInt max_write_length) StringToWideChars;
		public function char32*(GDNativeStringPtr self, GDNativeInt index) StringOperatorIndex;
		public function char32*(GDNativeStringPtr self, GDNativeInt index) StringOperatorIndexConst;

		/*Packed array functions*/
		public function uint8*(GDNativeTypePtr self, GDNativeInt index) PackedByteArrayOperatorIndex; //self should be a PackedByteArray
		public function uint8*(GDNativeTypePtr self, GDNativeInt index) PackedByteArrayOperatorIndexConst; //self should be a PackedByteArray

		public function GDNativeTypePtr(GDNativeTypePtr self, GDNativeInt index) PackedColorArrayOperatorIndex; //self should be a PackedColorArray, returns Color ptr
		public function GDNativeTypePtr(GDNativeTypePtr self, GDNativeInt index) PackedColorArrayOperatorIndexConst; //self should be a PackedColorArray, returns Color ptr

		public function float*(GDNativeTypePtr self, GDNativeInt index) PackedFloat32ArrayOperatorIndex; //self should be a PackedFloat32Array
		public function float*(GDNativeTypePtr self, GDNativeInt index) PackedFloat32ArrayOperatorIndexConst; //self should be a PackedFloat32Array
		public function double*(GDNativeTypePtr self, GDNativeInt index) PackedFloat64ArrayOperatorIndex; //self should be a PackedFloat64Array
		public function double*(GDNativeTypePtr self, GDNativeInt index) PackedFloat64ArrayOperatorIndexConst; //self should be a PackedFloat64Array

		public function int32*(GDNativeTypePtr self, GDNativeInt index) PackedInt32ArrayOperatorIndex; //self should be a PackedInt32Array
		public function int32*(GDNativeTypePtr self, GDNativeInt index) PackedInt32ArrayOperatorIndexConst; //self should be a PackedInt32Array
		public function int64*(GDNativeTypePtr self, GDNativeInt index) PackedInt64ArrayOperatorIndex; //self should be a PackedInt32Array
		public function int64*(GDNativeTypePtr self, GDNativeInt index) PackedInt64ArrayOperatorIndexConst; //self should be a PackedInt32Array

		public function GDNativeStringPtr(GDNativeTypePtr self, GDNativeInt index) PackedStringArrayOperatorIndex; //self should be a PackedStringArray
		public function GDNativeStringPtr(GDNativeTypePtr self, GDNativeInt index) PackedStringArrayOperatorIndexConst; //self should be a PackedStringArray

		public function GDNativeTypePtr(GDNativeTypePtr self, GDNativeInt index) PackedVector2ArrayOperatorIndex; //self should be a PackedVector2Array, returns Vector2 ptr
		public function GDNativeTypePtr(GDNativeTypePtr self, GDNativeInt index) PackedVector2ArrayOperatorIndexConst; //self should be a PackedVector2Array, returns Vector2 ptr
		public function GDNativeTypePtr(GDNativeTypePtr self, GDNativeInt index) PackedVector3ArrayOperatorIndex; //self should be a PackedVector3Array, returns Vector3 ptr
		public function GDNativeTypePtr(GDNativeTypePtr self, GDNativeInt index) PackedVector3ArrayOperatorIndexConst; //self should be a PackedVector3Array, returns Vector3 ptr

		public function GDNativeVariantPtr(GDNativeTypePtr self, GDNativeInt index) ArrayOperatorIndex; //self should be an Array ptr
		public function GDNativeVariantPtr(GDNativeTypePtr self, GDNativeInt index) ArrayOperatorIndexConst; //self should be an Array ptr

		/*Dictionary functions*/
		public function GDNativeVariantPtr(GDNativeTypePtr self, GDNativeTypePtr key) DictionaryOperatorIndex;
		public function GDNativeVariantPtr(GDNativeTypePtr self, GDNativeTypePtr key) DictionaryOperatorIndexConst;

		/*Object functions*/
		public function void(GDNativeMethodBindPtr methodBind, GDNativeObjectPtr instance, GDNativeVariantPtr* args, GDNativeInt argCount, GDNativeVariantPtr ret, CallError* error) ObjectMethodBindCall;
		public function void(GDNativeMethodBindPtr methodBind, GDNativeObjectPtr instance, GDNativeTypePtr* args, GDNativeTypePtr ret) ObjectMethodBindPtrcall;
		public function void(GDNativeObjectPtr obj) ObjectDestroy;
		public function GDNativeObjectPtr(c_char* name) GlobalGetSingleton;

		public function void*(GDNativeObjectPtr obj, void* token, InstanceBindingCallbacks* callbacks) ObjectGetInstanceBinding;
		public function void(GDNativeObjectPtr obj, void* token, void* binding, InstanceBindingCallbacks* callbacks) ObjectSetInstanceBinding;

		public function void(GDNativeObjectPtr obj, c_char* classname, ExtensionClassInstancePtr instance) ObjectSetInstance; /* classname should be a registered extension class and should extend the o object's class. */

		public function GDNativeObjectPtr(GDNativeObjectPtr object, void* class_tag) ObjectCastTo;
		public function GDNativeObjectPtr(GDObjectInstanceID instance_id) ObjectGetInstanceFromId;
		public function GDObjectInstanceID(GDNativeObjectPtr object) ObjectGetInstanceId;

		/*ClassDB functions*/
		public function GDNativeObjectPtr(c_char* classname) ClassDbConstructObject; /* The passed class must be a built-in godot class, or an already-registered extension class. In both case, object_set_instance should be called to fully initialize the object. */
		public function GDNativeMethodBindPtr(c_char* classname, c_char* methodName, GDNativeInt hash) ClassDbGetMethodBind;
		public function void*(c_char* classname) ClassDbGetClassTag;

		public function void(ExtensionClassLibraryPtr library, c_char* className, c_char* parentClassName, GDNativeExtensionClassCreationInfo* extensionFuncs) ClassDbRegisterExtensionClass;
		public function void(ExtensionClassLibraryPtr library, c_char* className, ExtensionClassMethodInfo* methodInfo) ClassDbRegisterExtensionClassMethod;
		public function void(ExtensionClassLibraryPtr library, c_char* className, c_char* enumName, c_char* constantName, GDNativeInt constantValue) ClassDbRegisterExtensionClassIntegerConstant;
		public function void(ExtensionClassLibraryPtr library, c_char* className, GDNativePropertyInfo* info, c_char* setter, c_char* getter) ClassDbRegisterExtensionClassProperty;
		public function void(ExtensionClassLibraryPtr library, c_char* className, c_char* groupName, c_char* prefix) ClassDbRegisterExtensionClassPropertyGroup;
		public function void(ExtensionClassLibraryPtr library, c_char* className, c_char* subgroupName, c_char* prefix) ClassDbRegisterExtensionClassPropertySubgroup;
		public function void(ExtensionClassLibraryPtr library, c_char* className, c_char* signalName, GDNativePropertyInfo* argumentInfo, GDNativeInt argumentCount) ClassDbRegisterExtensionClassSignal;
		public function void(ExtensionClassLibraryPtr library, c_char* className) ClassDbUnregisterExtensionClass; /*Unregistering a parent class before a class that inherits it will result in failure. Inheritors must be unregistered first.*/
	}

	/* Define a C function prototype that implements the function below and expose it to dlopen() (or similar).
	 * It will be called on initialization. The name must be an unique one specified in the .gdextension config file.
	 */

	//typedef GDNativeBool (*GDNativeInitializationFunction)(const GDNative.Interface *p_interface, const GDNative.ExtensionClassLibraryPtr p_library, GDNative.Initialization *initialization);

	public static class Godot
	{
		//function int32(void* usedata, void* data, int size) read;
	}
}